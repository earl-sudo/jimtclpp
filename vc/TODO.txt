* ISSUES: 
** exec event.test:88   event-10.1
** tailcall-1.9
** memory leaks
** prj_shutdown
** prj_ gmtime(&t) : localtime(&t)
** NOT USE_UTF8
* Get sockets working
* Get SSL working
* Memory leak
* zlib module
* lock.test:37	lock-1.5
* Get filesystem extension integerated.

* add destructors to all objects.
* build USE_UTF8 and NOT USE_UTF8
* Add from scripts messages to output in debug messages [dbgMsg type message return]
* Add introspection commands cmds-parameters/stats, compiler/build, internal-state
* Add more "watchers"
* Move breakpoints out.


* figure out what linenoise is about
* add sensor system
	* run time coverage info
* What to do about abort()?
* straighten proj_compat.c
* build version of jimsh that loads shared objects
* exception strategy
* jim-eventloop-ext.cpp convert to jim-api.h
* Speed testing
* add timing to test

* No way to set envirnoment variable - LATER
* Improve hashtable - LATER
* Add dev branch to GitHub project - LATER
* Generic argument checking. - LATER
* Grouping commands by type - LATER
	* CmdType1Files, CmdType1Dir, CmdType1Process, CmdType1LongJmp, CmdType1Signals, 
	* CmdType1SysInfo, CmdType1TermIO, CmdType1ProcessGroupsAnJobControl, CmdType1Regexp
	* CmdType1Local, CmdType1CharSet, CmdType1Reflect, CmdType1Eval, CmdType1Event
* Actually build tcl/python versions of jimtclpp - LATER
* Reintroduce script to make emedded scripts. Fix them so it works for C++ raw strings - LATER
* C++ adv interface - LATER 
* add command command - LATER

* Add ablity to log all calls, their args, and results. - MAYBE
* Expose function definition so you can edit text. - MAYBE
* Make COM interface - MAYBE
* build against ulibc, newlib, dietlibc -MAYBE
* Split up prj_compat.cpp so it doesn't get too large and complicated - MAYBE
* Add android build - MAYBE
* ABI Compilance Checker - MAYBE
* Reintroduce configure - MAYBE
* Code to filter out comments from code. - MAYBE

* Kcov points
* No jim-log-ext
* No jim-posix-ext
* No jim-interactive-.cpp
* No jim-signal-ext
* No jim-load-ext
* 20% jim-history-ext
* jim-aio-ext
** aio_cmd_read()
** aio_cmd_isatty()
** aio_cmd_eof()
** aio_cmd_seek()
** aio_cmd_filename()
** aio_cmd_ndelay()
** aio_cmd_sync()
** aio_cmd_buffering()
** aio_cmd_readable()
** aio_cmd_writable()
** aio_cmd_onexception()
** file_cmd_extension()
** file_cmd_normalize()
** file_cmd_readable()
** file_cmd_writable()
** file_cmd_executable()
** file_cmd_tempfile()
** file_stat()
** file_lstat()
** file_cmd_atime()
** file_cmd_mtime()
** file_cmd_mtimeus()
** file_cmd_isfile()
** file_cmd_owned()
** file_cmd_readlink()
** file_cmd_type()
** file_cmd_lstat()
** interp_cmd_alias()
** clock_cmd_seconds()
** clock_cmd_micros()
** clock_cmd_millis()
** show_cmd_usage()
** package_cmd_provide()
** package_cmd_list()
** Jim_ResizeHashTable() 
** Jim_GetHashTableIterator()
** DupInterpolatedInternalRep()
** Jim_StringByteRangeObj()
** SetReferenceFromAny()
** Jim_SetFinalizer()
** Jim_GetFinalizer()
** UpdateStringOfIndex()
** JimShowExprNode()
** DupScanFmtInternalRep()
** UpdateStringOfScanFmt()
** Jim_PutsCoreCommand()
** JimGetExprAsList()
** Jim_DebugCoreCommand()
** Jim_FinalizeCoreCommand()
** JimInfoReferences()

DONE
* fix USE_JIM_SHORT_API
* move dlopen() dlclose() dlsym() dlerror() to prj_compat.h
* move opendir() closedir() readdir()
* fix collision on LLONG_MAX LLONG_MIN
* Include jim-api.h in jim.h
* mark all uses prj_funcDef()
* 0'th order test
* get CMake build working
* Fix readdir
* Marking all language commands.
* Add gcc/msvc macro discovery code
* #define Jim_Eval_Named(I, S, F, L) Jim_EvalSource((I), (F), (L), (S))
* #define Jim_EvalPrefix(i, p, oc, ov) Jim_EvalObjPrefix((i), Jim_NewStringObj((i), (p), -1), (oc), (ov)) // #TODO
* #define Jim_NewWideObj  Jim_NewIntObj // #TODO
* Work all ConvFunc
* jim-aio-ext.cpp use of jim.h
* Get rid of most #ifdef(s)
* Fix includes to no include so much and use prj_compat.h
* jim-subcmd.cpp remove jim.h - OBE
* Only use jim-api.h in extensions.
* Move some headers to private include
* Better way of dealing with versions
* get rid of jim-win32compat.h/..c
* Per object allocator
* Update VC++ proj files 
* Coverage testing
* document features
* Edit up text for intro and readme
* Get Windows/Mac GitHub build to compile.
* valgrind
* body valgrind.sh
* body dump_abi.sh
* body check_abi.sh
* body build.sh
* document actions 
* find definition Jim_SetListIndex() - There isn't any, remove.
* Add unittest to GitHub build
* How to deal with optional parts i.e. extensions
* Convert STATIC to namespace
* Find all un-checked returns
* export functions from DLL
* Fix inlines to be none-inline or not 
* Add top level exception handler.
* Get rid of longjmp. 
* Gather prototypes of functions - CANCELED because I forgot what it was about
* Add C version of API - MAYBE
* build test runner. - MAYBE

Questions
* What's with "#pragma once"?
* What's with getting rid of most of the macros?
* What's with getting rid of most "#if"(s)?
* What's with adding a bunch of small accessors?
* What's with adding accessors to pointers?
* Why C++?
* Why not use C++ stdlib and BOOST?
* Why Jim?
* About Jim
* What is portable?
	* Chooses 
	*	C++17
	*	#pragma once
	*	#pragma message("")

